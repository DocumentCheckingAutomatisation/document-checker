import json
from collections import Counter

from dedoc import DedocManager

file_path = "C:/Users/ALENA/PycharmProjects/AutoStandartControl/docs/diploma_lib.docx"
manager = DedocManager()  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
result = manager.parse(file_path, {"document_type": "diploma"})  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª

# print(result)  # <dedoc.data_structures.ParsedDocument>
serialised_doc = result.to_api_schema().model_dump()


def get_parts(annotations, needed_parts):
    found_parts = []  # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    for annotation in annotations:
        if annotation["text"] in needed_parts:
            found_parts.append(annotation["text"])
    return found_parts


with open("rules/diploma_rules.json", "r", encoding="utf-8") as read_file:
    rules = json.load(read_file)
    required_chapters = rules["structure_rules"]["required_chapters"]

print(required_chapters)

found_parts = get_parts(serialised_doc["content"]["structure"]["subparagraphs"], required_chapters)

missing_parts = set(required_chapters) - set(found_parts)
duplicates = [part for part, count in Counter(found_parts).items() if count > 1]

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
print("\nüìå **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**")
print(", ".join(required_chapters))

print("\n‚úÖ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**")
print(", ".join(found_parts) if found_parts else "‚ùå –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤")

if missing_parts:
    print("\n‚ö†Ô∏è **–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–¥–µ–ª—ã:**")
    print(", ".join(missing_parts))

if duplicates:
    print("\nüîÅ **–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ä–∞–∑–¥–µ–ª—ã:**")
    print(", ".join(duplicates))

#
#
# needed_parts = ['–í–≤–µ–¥–µ–Ω–∏–µ']
#
# file_path = "/docs/diploma_lib.docx"
# manager = DedocManager()  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
# result = manager.parse(file_path, {"document_type": "diploma"})  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
#
# print(result)  # <dedoc.data_structures.ParsedDocument>
# serialised_doc = result.to_api_schema().model_dump()  # —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
#
# annotations = serialised_doc["content"]["structure"]["subparagraphs"]
# annotations = json.dumps(annotations, indent=2, ensure_ascii=False)
# #print(annotations)  # –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
#
# def get_parts(annotations, needed_parts):
#     result = []
#     for annotation in annotations:
#         if annotation["text"] in needed_parts:
#             result.append(annotation)
#     return result
#
# needed_parts = get_parts(serialised_doc["content"]["structure"]["subparagraphs"], needed_parts)
#
# print(json.dumps(needed_parts, indent=2, ensure_ascii=False))  # –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
#
#
# # –£–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏ —Ç–∏–ø —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
#
# def get_annotations_for_title(serialised_doc, title):
#     """
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞.
#     """
#     annotations = serialised_doc["content"]["structure"]["subparagraphs"]
#     for annotation in annotations:
#         if annotation["text"] == title:
#             return annotation.get("annotations", [])
#     return []
#
# def extract_font_details(annotations):
#     """
#     –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏ —Ç–∏–ø —à—Ä–∏—Ñ—Ç–∞ –∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π.
#     """
#     font_size = None
#     font_style = None
#     for annotation in annotations:
#         if annotation["name"] == "size":
#             font_size = annotation["value"]
#         elif annotation["name"] == "style":
#             font_style = annotation["value"]
#     return font_size, font_style
#
# title = "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"
#
# title1 = "–í–≤–µ–¥–µ–Ω–∏–µ"
#
# annotations = get_annotations_for_title(serialised_doc, title)
#
# font_size, font_style = extract_font_details(annotations)
#
# print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
# print(f"–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {font_size}")
# print(f"–¢–∏–ø —à—Ä–∏—Ñ—Ç–∞: {font_style}")
#
# annotations = get_annotations_for_title(serialised_doc, title1)
#
# font_size, font_style = extract_font_details(annotations)
#
# print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title1}")
# print(f"–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {font_size}")
# print(f"–¢–∏–ø —à—Ä–∏—Ñ—Ç–∞: {font_style}")
#
